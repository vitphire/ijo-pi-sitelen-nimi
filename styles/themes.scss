@use "pastel";
@use "_trans" as trans;

// Funky live theme switching

@mixin th($property, $if-light, $if-dark) {
  $path: &;
  @at-root :root {
    &:not(.theme-light, .theme-dark) {
      #{$path} {
        @media (prefers-color-scheme: light) {
          #{$property}: #{$if-light};
        }
        @media (prefers-color-scheme: dark) {
          #{$property}: #{$if-dark};
        }
      }
    }

    &.theme-light {
      #{$path} {
        #{$property}: #{$if-light};
      }
    }

    &.theme-dark {
      #{$path} {
        #{$property}: #{$if-dark};
      }
    }
  }

  transition: trans.trans(#{$property}, $duration: 0.5, $timing: ease-in-out);
}

// Letter colors

$letter-colors: pastel.$lime pastel.$dark-lime,
pastel.$red pastel.$dark-red,
pastel.$blue pastel.$dark-blue,
pastel.$purple pastel.$dark-purple,
pastel.$green pastel.$dark-green,
pastel.$orange pastel.$dark-orange,
pastel.$blue-2 pastel.$dark-blue-2,
pastel.$yellow pastel.$dark-yellow,
pastel.$magenta pastel.$dark-magenta;

@for $i from 1 through length($letter-colors) {
  $color: nth($letter-colors, $i);
  $color-light: nth($color, 1);
  $color-dark: nth($color, 2);
  .letter-fg-color-#{$i} {
    @include th(color, $color-dark, $color-light);
  }
  .letter-bg-color-#{$i} {
    @include th(background, $color-light, $color-dark);
  }
}

html, body {
  @include th(background, pastel.$off-white, pastel.$dark-gray-2);
  @include th(color, pastel.$black, pastel.$light-gray);
}

button {
  @include th(border-color, pastel.$black, pastel.$gray);
}

#settings-button {
  @include th(background, pastel.$off-white, pastel.$dark-gray);
  @include th(color, pastel.$black, pastel.$light-gray);

  &:hover {
    @include th(background,
            darken(pastel.$off-white, 10%),
            lighten(pastel.$dark-gray, 5%));
  }

  &:active {
    @include th(background,
            darken(pastel.$off-white, 20%),
            darken(pastel.$dark-gray, 10%));
  }
}

@each $button, $color in "reset" pastel.$dark-red,
"randomize" pastel.$dark-purple,
"copy" pastel.$dark-blue {
  ##{$button}-button {
    background: $color;
    color: pastel.$white;

    &:hover {
      background: lighten($color, 10%);
    }

    &:active {
      background: darken($color, 10%);
    }
  }
}

#name-input-container .text-box-container {
  @include th(background, pastel.$light-red, pastel.$dark-gray);
  @include th(color, pastel.$black, pastel.$light-gray);
}

#name-text-box {
  color: transparent;
  @include th(caret-color, pastel.$black, pastel.$light-gray);
}

#name-text-box-size-calibration::before {
  @include th(color, pastel.$black, pastel.$light-gray);
  opacity: 0.5;
}

#status-text--valid, #status-text--uncommon {
  @include th(color, pastel.$dark-green-2, pastel.$green);
}

.valid .text-box-container, .uncommon .text-box-container {
  @include th(border-color, pastel.$dark-green-2, pastel.$green);
}

#status-text--invalid {
  @include th(color, pastel.$dark-red, pastel.$red);
}

.invalid .text-box-container {
  @include th(border-color, pastel.$dark-red, pastel.$red);
}

#success-popup {
  @include th(background,
          transparentize(pastel.$black, 0.3),
          transparentize(pastel.$dark-gray, 0.2));
  color: pastel.$white;
}

name-letter {
  @include th(border-color, pastel.$black, pastel.$gray);
}

#settings-scrim {
  background: rgba(0, 0, 0, 0.5);
}

#settings-window {
  @include th(background, pastel.$off-white, pastel.$dark-gray);
  @include th(color, pastel.$black, pastel.$light-gray);
  @include th(border-color, pastel.$black, pastel.$gray);

  fieldset .option input:checked + .label-text::after {
    @include th(background, darken(pastel.$off-white, 20%),
            lighten(pastel.$gray, 5%));
  }
  fieldset .option:hover .label-text::after {
    @include th(background, darken(pastel.$off-white, 12%),
            darken(pastel.$gray, 2%));
  }

  fieldset {
    @include th(border-color, pastel.$black, pastel.$white);
  }
}

